(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Cel = factory());
}(this, (function () { 'use strict';

// src/core/initMixin.js


function initMixin(Cel) {
	// Finds elements via its selector and caches them under the 'elem' property of that element.
	Cel.prototype._getElementsOnMount = function () {
		var vm = this;
		if (vm.elems.length > 0) {
			for (var i = 0, numElem = vm.elems.length; i < numElem; i++) {

				// If jQuery is available and using the '$elemName' convention,
				// Return a jQuery object.
				if ((jQuery != null || $ != null) && vm.elems[i].name.slice(0, 1) === '$') {
					vm.elems[i].elem = $(vm.elems[i].selector);
					vm.elems[i].type = 'jquery';
				}

				// Else, just use vanilla javascript DOM node.
				else {
						vm.elems[i].elem = document.querySelector(vm.elems[i].selector);
						vm.elems[i].type = 'element';
					}
			} // for
		} // if
	};

	// Binds the component's "this" to the methods.
	// This is done to be able to call 'this.methods.functionName()' from other methods and handlers.
	Cel.prototype._bindThisToMethods = function () {
		var vm = this;
		var methods = Object.keys(vm.methods);
		if (methods.length > 0) {
			for (var i = 0, numMethods = methods.length; i < numMethods; i = i + 1) {
				vm.methods[methods[i]] = vm.methods[methods[i]].bind(vm);
			} // for
		} // if
	};

	// Adds event-listeners to target elements when component initializes.
	Cel.prototype._bindEventsOnMount = function () {
		var vm = this;
		var numEvents = vm.events.length;
		if (vm.elems.length > 0 && numEvents > 0) {

			// Filters out an element that matches the event's target.
			var findEventTargetInElements = function findEventTargetInElements(elIndex, item, index) {
				return item.name === vm.events[elIndex].target;
			};

			// Binds each event to its designated target
			for (var i = 0; i < numEvents; i++) {
				var target = vm.elems.filter(findEventTargetInElements.bind(vm, i))[0];
				var bindType = target.type === 'jquery' ? 'on' : 'addEventListener';
				var func = vm.handlers[vm.events[i].handler].bind(vm);

				// Prevent using Debounce and Throttle for same event.
				if (vm.events[i].debounce != null && typeof vm.events[i].debounce === 'number' && vm.events[i].throttle != null && typeof vm.events[i].throttle === 'number') {
					console.warn('[' + vm.name + ']: Cannot set both \'debounce\' and \'throttle\' configurations on the same event. Please use only one.');
				} // if

				// Add debouncing to function if setting is correct.
				else if (vm.events[i].debounce != null) {
						if (typeof vm.events[i].debounce === 'number' && vm.events[i].debounce > 0) {
							// Setting is correct, adding debouncing.
							func = vm._debounce(func, vm.events[i].debounce);
						} else {
							console.warn('[' + vm.name + ']: Ensure your \'debounce\' setting is a number greater than 0.');
						}
					} // else if

					// Add throttling to function if setting is correct.
					else if (vm.events[i].throttle != null) {
							if (typeof vm.events[i].throttle === 'number' && vm.events[i].throttle > 0) {
								// Setting is correct, adding throttling.
								func = vm._throttle(func, vm.events[i].throttle);
							} else {
								console.warn('[' + vm.name + ']: Ensure your \'throttle\' setting is a number greater than 0.');
							}
						} // else if

				// Binding callback event to target.
				target.elem[bindType](vm.events[i].type, func);
			} // for numEvents
		} // if elems.length
	};

	// Ensuring the settings are correct.
	Cel.prototype._checkComponentSettings = function () {
		var vm = this;
		if (vm.name === null || vm.name === '' || vm.name === 'NamelessComponent') {
			console.warn('Please ensure that you named all your components with a \'name\' property. At least one is missing right now.');
		}
	};

	// Publically accessible initialize function to bootstrap the component.
	Cel.prototype.init = function () {
		var vm = this;
		vm._checkComponentSettings();
		vm._getElementsOnMount();
		vm._bindThisToMethods();
		vm._bindEventsOnMount();
	};
}

// src/core/scriptMixin.js


function scriptMixin(Cel) {
	// From Underscore library
	Cel.prototype._debounce = function (func, wait, immediate) {
		var timeout = void 0;
		return function () {
			var context = this;
			var args = arguments;
			var later = function later() {
				timeout = null;
				if (!immediate) {
					func.apply(context, args);
				}
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) {
				func.apply(context, args);
			}
		};
	};

	// From Underscore library
	Cel.prototype._throttle = function (func, wait, options) {
		var context = void 0,
		    args = void 0,
		    result = void 0;
		var timeout = null;
		var previous = 0;
		if (!options) {
			options = {};
		}
		var later = function later() {
			previous = options.leading === false ? 0 : Date.now();
			timeout = null;
			result = func.apply(context, args);
			if (!timeout) {
				context = args = null;
			}
		};
		return function () {
			var now = Date.now();
			if (!previous && options.leading === false) {
				previous = now;
			}
			var remaining = wait - (now - previous);
			context = this;
			args = arguments;
			if (remaining <= 0 || remaining > wait) {
				if (timeout) {
					clearTimeout(timeout);
					timeout = null;
				}
				previous = now;
				result = func.apply(context, args);
				if (!timeout) {
					context = args = null;
				}
			} else if (!timeout && options.trailing !== false) {
				timeout = setTimeout(later, remaining);
			}
			return result;
		};
	};

	Cel.prototype.setState = function (prop, value) {
		var vm = this;
		try {
			vm.state[prop] = value;
		} catch (e) {
			console.warn('[' + vm.name + ']: Could not set value of "' + prop + '", make sure it exists in your component config.');
		}
	};
}

// src/core/component.js
function Cel$3(options) {
	this.name = options.name || 'NamelessComponent';
	this._ = options._;
	this.state = options.state;
	this.elems = options.elems;
	this.methods = options.methods;
	this.handlers = options.handlers;
	this.events = options.events;
}

initMixin(Cel$3);
scriptMixin(Cel$3);

// src/core/cel.js
var Cel$1 = function Cel(options) {

	var cel = new Cel$3(options);

	return {
		init: cel.init.bind(cel)
	};
};

// src/index.js

return Cel$1;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
